            +--------------------+
            |        CS 140      |
            | PROJECT 1: THREADS |
            |   DESIGN DOCUMENT  |
            +--------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

FirstName LastName <email@domain.example>
FirstName LastName <email@domain.example>
FirstName LastName <email@domain.example>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

                 ALARM CLOCK
                 ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

             PRIORITY SCHEDULING
             ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.

struct lock {
    .
    .
    struct list_elem elem;      /* List element for thread lock list*/
    int priority;               /* Maximum priority between threads */
  }

struct thread {
    .
    .
    int original_priority;
    struct lock *wait;                 /* Lock which thread waits for */
    struct list locks;                 /* List of owned locks */
    .
    .                 
  }

Three new members were added to struct thread, integer to save original
priority to revert after priority donation ends. Also, a list for owned
locks references and a pointer to the  lock which the  thread waits for
(if exits), by default its value is NULL.

Two new members were added to struct lock, an integer to save the owner
thread of the lock and a list element for list locks in struct thread.

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.

- int priority (struct lock):
    Used to save the priority of waiting thread (donated or original).
- int original_priority (struct thread):
    Used to save the original priority of the thread. It is used to revert
    to it when the thread releases a lock.
- struct lock * wait (struct thread):
    Used  to  save  the  lock  which  thread  is  waiting  for  to  acquire.
    Also,  used  to  keep  track  of  nested  donations.
- struct list locks (struct thread):
    Used to keep  track of the thread's  current owned locks. Also, used  to
    update thread priority in case of donation.


- Nested Donations:

                        /----Lock1.holder     /----Lock2.holder     /---- Lock3.holder
       ____________    /     ____________    /     ____________    /     ____________
      |      A     | Lock 1 |     B      | Lock 2 |     C      | Lock 3 |      D     |
 ---- |        wait|------->|        wait|------->|        wait|------->|            |
      |   p = 100  |        |   p = 100  |        |   p = 100  |        |   p = 100  |
      | o_p = 100  |        |  o_p = 50  |        |  o_p = 60  |        |  o_p = 10  |
      |____________|        |____________|        |____________|        |____________|
         Thread A              Thread B              Thread C              Thread D

    o_p -> stands for original_priority in struct thread
    ALGORITHM:
        tmp = lock1
        for i in range depth
            if tmp.holder is NULL
                break
            else
                tmp.priority = thread.priority
                update_priority(tmp.holder)
                tmp = tmp.holder.wait

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

--  semaphores  : when sema_up() is called, it searches for the highest
                  priority thread among the list of waiters, this thread
                  gets unblocked and moved to ready list.

--     lock     : since locks are implemented using semaphores, the highest
                  priority thread gets unblocked in the same way.

-- cond variable: condition variables have a list of semaphores, so we search
                  for the thread with highest priority among all semaphore,
                  and this thread is unblocked.
-- After each of these conditions, a function call is made to thread_check_priority()
   which checks if the unblocked thread has a higher priority than the current thread
   and if so, thread_yield() is called to reschedule.

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

- When lock_acquire() is called, the calling thread donates its priority to the lock,
  then calls thread_update_priority(lock->holder), which updates the lock holder's 
  priority. For nested donations, a loop was used. In each iteration, the variable
  struct lock * tmp is updated to tmp->holder->wait. In another way, it updates itself
  to the lock which the previous lock holder was waiting for. It donates its priority
  to that lock, and then calls thread_update_priority(tmp->holder) until it finds a
  holder thread with no waiting blovk (NULL), or to the required depth.

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

- When lock_release() is called by a thread, it removes the lock from the list of 
  locks in struct thread. Then it updates its priority thorugh thread_update_priority()
  The function restores the thread priority into its original priority, and checks if
  it acquires any other locks that might increase its priority by donation.
  After that, sema_up() is called on the lock's semaphore, and by semaphore implementation
  it will wake up the higher-priority thread, which will lead to rescheduling and the
  higher-priority thread will acquire the lock.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

- If thread_set_priority() was called when another thread was editing priority thorugh
  donation. Interrupts were disabled during thread_set_priority() to avoid such behavior.

- A lock can be used to prevent race conditions on priority, when one thread is editing
  it, no other thread can. However, lock_acquire() itself disable interrupts.

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

- When we donate the priority to locks instead of donating it directely to the thread,
  we eliminsted many race conditions may occur. Also, this implementation is easier as
  each thread only will keep track of its acquired locks, and whenever a high priority
  thread gets blocked by the lock, the priority of the locker holder will increase by
  donation.

              ADVANCED SCHEDULER
              ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0
 4
 8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?

               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
